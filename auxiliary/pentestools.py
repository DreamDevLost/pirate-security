import os, time, urlparse
try:
	import fileloader
except:
	print '[-] Algumas libs nao foram carregadas...'
	time.sleep(1)
	exit()

def banner(type='pentools'):
	os.system('clear')

	if type == 'pentools':
		print """
		\r /$$$$$$$                           /$$$$$$$$                  /$$          
		\r| $$__  $$                         |__  $$__/                 | $$          
		\r| $$  \ $$ /$$$$$$  /$$$$$$$          | $$  /$$$$$$   /$$$$$$ | $$  /$$$$$$$
		\r| $$$$$$$//$$__  $$| $$__  $$         | $$ /$$__  $$ /$$__  $$| $$ /$$_____/
		\r| $$____/| $$$$$$$$| $$  \ $$         | $$| $$  \ $$| $$  \ $$| $$|  $$$$$$ 
		\r| $$     | $$_____/| $$  | $$         | $$| $$  | $$| $$  | $$| $$ \____  $$
		\r| $$     |  $$$$$$$| $$  | $$         | $$|  $$$$$$/|  $$$$$$/| $$ /$$$$$$$/
		\r|__/      \_______/|__/  |__/         |__/ \______/  \______/ |__/|_______/ 
		\r @piratesecurity
		"""
	elif type == 'sniffers':
		print """
		\r  /$$$$$$            /$$  /$$$$$$   /$$$$$$                             
		\r /$$__  $$          |__/ /$$__  $$ /$$__  $$                            
		\r| $$  \__/ /$$$$$$$  /$$| $$  \__/| $$  \__//$$$$$$   /$$$$$$   /$$$$$$$
		\r|  $$$$$$ | $$__  $$| $$| $$$$    | $$$$   /$$__  $$ /$$__  $$ /$$_____/
		\r \____  $$| $$  \ $$| $$| $$_/    | $$_/  | $$$$$$$$| $$  \__/|  $$$$$$ 
		\r /$$  \ $$| $$  | $$| $$| $$      | $$    | $$_____/| $$       \____  $$
		\r|  $$$$$$/| $$  | $$| $$| $$      | $$    |  $$$$$$$| $$       /$$$$$$$/
		\r \______/ |__/  |__/|__/|__/      |__/     \_______/|__/      |_______/ 
		"""
	elif type == 'scan':
		print """
		\r  /$$$$$$                          
		\r /$$__  $$             
		\r| $$  \__/  /$$$$$$$  /$$$$$$  /$$$$$$$ 
		\r|  $$$$$$  /$$_____/ |____  $$| $$__  $$
		\r \____  $$| $$        /$$$$$$$| $$  \ $$
		\r /$$  \ $$| $$       /$$__  $$| $$  | $$
		\r|  $$$$$$/|  $$$$$$$|  $$$$$$$| $$  | $$
		\r \______/  \_______/ \_______/|__/  |__/
		"""

def main():
	banner()
	i = raw_input("\n[1] Sniffer 	[2] Scan 	[3] Spoofing \n[4] Phishing 	[5] IRC 	[6] Wireless \n\n[7] Sair\n\n[*] Escolha uma opcao> ")
	print("\n")
	if i == '1':
		sniffer()
	elif i == str(2):
		scan()
	elif i == str(3):
		#spoof()
		print "EM CONSTRUCAO!!..."
		time.sleep(1)
		main()
	elif i == str(4):
		#phis()
		print "EM CONSTRUCAO!!..."
		time.sleep(1)
		main()
	elif i == str(5):
		#irc()
		print "EM CONSTRUCAO!!..."
		time.sleep(1)
		main()
	elif i == str(6):
		#wifi()
		print "EM CONSTRUCAO!!..."
		time.sleep(1)
		main()
	elif i == str(7):
		print "Saindo..."
		time.sleep(1)
		exit()
	else:
		print("[-] Digite apenas numeros! [1-7]")
		time.sleep(1)
		main()

def download(source, output):
	# source e o link para o arquivo
	# target e onde o arquivo vai ser gravado no disk(incluindo nome do arquivo e extensao)
	ff = fileloader.load(source,target='@'+os.getcwd()+'/'+output)

	# Se download
	if ff.valid:
		print '[*] Download {0}'.format(ff.source) 
	else:
		print '[X] Failed to download {0}'.format(ff.source)
		exit()

def install(link):
	# Parametro 'tar' para extrair
	tar_param    = ''
	# Lista de extensoes comuns e seus parametros para extrair com tar
	extensions   = {'bz2':'-xvjf','gz':'-xvzf','xz':'-Jxf'} 
	# Separa as partes da url
	link_parts 	 = urlparse.urlparse(link)
	# Tira o nome do arquivo da url
	nome_arquivo = link_parts.path[1:].rsplit('/')[1]
	# Extensao do arquivo
	ext_arquivo  = nome_arquivo[(nome_arquivo.index('.tar.') + 5):] 
	# Nome da pasta extraida da source
	folder_program = nome_arquivo[:nome_arquivo.find('.tar')]

	if ext_arquivo in extensions:
		tar_param = extensions[ext_arquivo]

	# Faz download
	download(link, nome_arquivo)									
	# Extrai o programa
	print '[*] Extraindo {0}...'.format(nome_arquivo)
	os.system('tar {0} {1} >> /dev/null 2>&1'.format(tar_param,nome_arquivo)) 
	# configure & install
	print '[*] Configurando e instalando...'
	#os.system("cd {0} && ./configure && make && make install".format(folder_program))

	print '[*] Apagando arquivos desnecessarios...'	# Log
	#os.system('cd ../')							# Sai da pasta do programa
	os.system('rm {0}'.format(nome_arquivo))		# Apaga source baixada
	os.system('rmdir Cache/ >> /dev/null 2>&1')		# Apaga pasta de Cache de download
	os.system('rm -rf {0}/'.format(folder_program)) # Apaga pasta extraida da source
	time.sleep(1)

def sniffer():
	banner('sniffers')

	i = raw_input("[1] Wireshark 	[2] TCPdump 	[3] DHCPdump\n[4] Dsniff 	[5] Kismet 	[6] HCIdump\n[7] Voltar\n\n[*] Escolha uma opcao> ")
	print("\n")

	if i == '1':
		print("[*] Instalando Wireshark...")	#log
		install('https://2.na.dl.wireshark.org/src/wireshark-2.2.2.tar.bz2')
		print("[+] Wireshark instalado!")
		time.sleep(1)
		main()
		
	elif i == '2':
		print("[*] Instalando TCPdump...")
		install('http://www.tcpdump.org/release/tcpdump-4.8.1.tar.gz')
		print("[+] TCPdump instalado!")
		time.sleep(1)
		main()
		
	elif i == '3':
		print("[*] Instalando DHCPdump...")
		install('http://downloads.sourceforge.net/project/dhcpdump2/dhcpdump-2.0.1.tar.gz?r=&ts=1480310138&use_mirror=ufpr')
		print("[+] DHCPdump instalado!") 
		time.sleep(1)
		main()
		
	elif i == '4':
		print("[*] Instalando Dsniff...")
		install('https://www.monkey.org/~dugsong/dsniff/dsniff-2.3.tar.gz')
		print("[+] Dsniff instalado!")
		time.sleep(1)
		main()
		
	elif i == '5':
		print("[*] Instalando Kismet...")
		install('http://www.kismetwireless.net/code/kismet-2016-07-R1.tar.xz')
		print("[+] Kismet instalado!")
		time.sleep(1)
		main()
		
	elif i == '6':
		print("[*] Instalando Bluez-hcidump...")
		install('http://www.kernel.org/pub/linux/bluetooth/bluez-5.43.tar.xz')
		print("[*] Bluez-hcidump Instalado!")
		time.sleep(1)
		main()
	
	elif i == '7':
		main()
		
def scan():
	banner('scan')
	selected = raw_input("[1] Nmap 		[7] Voltar\n\n[*]Escolha uma das opcoes>")
	print "\n"

	if selected == str(1):
		print "[*] Instalando Nmap 7.31..."
		install('https://nmap.org/dist/nmap-7.31.tar.bz2')
		print "[+] Nmap 7.31 Instalado!"
		time.sleep(1)
		main()
	elif selected == str(7):
		main()
	else:
		print "[-] Apenas numeros de 1-1"
		time.sleep(1)
		scan()

if __name__ == "__main__":
	try:
		main()
	except KeyboardInterrupt:
		print "\nSaindo..."
		time.sleep(1)
		exit()
